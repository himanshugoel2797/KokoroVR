//VertexShader
#version 460 core
#extension GL_ARB_bindless_texture : require
#extension GL_AMD_vertex_shader_viewport_index : require
#extension GL_ARB_shader_draw_parameters : require
 #define MAX_DRAWS_UBO 256
 #define MAX_DRAWS_SSBO 1024
 #define PI 3.14159265358979
uniform int _blk_size;layout(rgba8i, bindless_image) restrict readonly uniform iimageBuffer vs_pos_d;
// Output data ; will be interpolated for each fragment.
out vec3 normal;
out vec3 pos;
flat out uint vox_v;

// Values that stay constant for the whole mesh.
uniform mat4 ViewProj;

struct block_info_t {
	vec4 o;
};

layout(std430, binding = 1) buffer BlockInfos_t {
    block_info_t v[];
} BlockInfo;

void main(){
	int _idx = int(gl_BaseInstance);ivec4 vs_pos = imageLoad(vs_pos_d, gl_VertexID);


	vec3 n_unnorm = ((vs_pos.xyz & 192) - 64) / 64.0f;
	vec3 vs_pos_e = (vs_pos.xyz & 63);

	vec3 face_pos = vs_pos_e.xyz + BlockInfo.v[_idx].o.xyz;
	normal = n_unnorm;
    pos = face_pos;
	vox_v = uint(vs_pos.w);
	gl_Position =  ViewProj * vec4(face_pos, 1);
}
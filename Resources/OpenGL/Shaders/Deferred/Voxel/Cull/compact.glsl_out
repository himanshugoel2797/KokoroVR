//ComputeShader
#version 460 core
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_ballot : require
#extension GL_ARB_bindless_texture : require
#extension GL_AMD_vertex_shader_viewport_index : require
#extension GL_ARB_shader_draw_parameters : require
 #define MAX_DRAWS_UBO 256
 #define MAX_DRAWS_SSBO 1024
 #define PI 3.14159265358979
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct draw_cmd_t{
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

layout(std430, binding = 6) restrict coherent buffer OutDrawCMDs_t {
    uint x;
    uint drawCalls;
    uint z;
    uint drawCalls1;
    draw_cmd_t cmds[];
} O_DrawCMDs;

layout(std430, binding = 5) restrict readonly buffer DrawCMDs_t {
    uint x;
    uint drawCalls;
    uint z;
    uint drawCalls1;
    draw_cmd_t cmds[];
} DrawCMDs;

void main(){
    //indirect dispatch using DrawCMDs.drawCalls
    bool laneActive = DrawCMDs.cmds[gl_GlobalInvocationID.x].count != 0;
    uint64_t mask_v = ballotARB(laneActive);
	uvec2 mask_v_unpacked = unpackUint2x32(mask_v);
	uvec2 mask_v_unpacked_masked = unpackUint2x32(mask_v & gl_SubGroupLtMaskARB);
	int mask_v_bitcnt = int(bitCount(mask_v_unpacked.x) + bitCount(mask_v_unpacked.y));
    int oSlot = int(bitCount(mask_v_unpacked_masked.x) + bitCount(mask_v_unpacked_masked.y));

    uint shared_slot;
    if(gl_LocalInvocationID.x == 0){
        shared_slot = atomicAdd(O_DrawCMDs.drawCalls1, mask_v_bitcnt);
    }
    shared_slot = readFirstInvocationARB(shared_slot);

    if(laneActive){
        O_DrawCMDs.cmds[shared_slot + oSlot].count = DrawCMDs.cmds[gl_GlobalInvocationID.x].count;
        O_DrawCMDs.cmds[shared_slot + oSlot].instanceCount = DrawCMDs.cmds[gl_GlobalInvocationID.x].instanceCount;
        O_DrawCMDs.cmds[shared_slot + oSlot].firstIndex = DrawCMDs.cmds[gl_GlobalInvocationID.x].firstIndex;
        O_DrawCMDs.cmds[shared_slot + oSlot].baseVertex = DrawCMDs.cmds[gl_GlobalInvocationID.x].baseVertex;
        O_DrawCMDs.cmds[shared_slot + oSlot].baseInstance = DrawCMDs.cmds[gl_GlobalInvocationID.x].baseInstance;
    }
}